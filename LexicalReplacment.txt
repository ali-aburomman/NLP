							      >	from nltk.corpus import framenet as fn
import Embedding						import Embedding
							      >	import random
from fitbert import FitBert					from fitbert import FitBert
import json							import json


class Lexical(object):						class Lexical(object):
    """								    """
    Root class for lexical generation. We experimented with s	    Root class for lexical generation. We experimented with s
    """								    """
    def generate_for_sample(self, sample):			    def generate_for_sample(self, sample):
        return self.generate(sample.text, sample.source, samp	        return self.generate(sample.text, sample.source, samp


class LexicalReplacement(Lexical):				class LexicalReplacement(Lexical):
    """								    """
    Main Lexical Replacement model from the paper.		    Main Lexical Replacement model from the paper.

    It initializes with frame-based embeddings and mappings, 	    It initializes with frame-based embeddings and mappings, 
    the source/target mapping. Requires text, source/target d	    the source/target mapping. Requires text, source/target d

    If the word isn't in the embeddings, or can't be mapped, 	    If the word isn't in the embeddings, or can't be mapped, 
    """								    """

    def __init__(self, mappings, embeddings):			    def __init__(self, mappings, embeddings):
        self.mapping = json.load(open(mappings))		        self.mapping = json.load(open(mappings))
        self.embeddings = Embedding.load_w2v(embeddings)	        self.embeddings = Embedding.load_w2v(embeddings)
        self.fb = FitBert()					        self.fb = FitBert()

    def generate_test(self, test):				    def generate_test(self, test):
        """							        """
        Generates based on Test instances from the ModelTesti	        Generates based on Test instances from the ModelTesti
        :param test:						        :param test:
        :return:						        :return:
        """							        """
        return self.generate(test.text, test.source, test.tar	        return self.generate(test.text, test.source, test.tar

    def generate(self, input_sentence, source, target, focus_	    def generate(self, input_sentence, source, target, focus_
        """							        """
        Generates using full inputs				        Generates using full inputs
        :param input_sentence:					        :param input_sentence:
        :param source:						        :param source:
        :param target:						        :param target:
        :param focus_id:					        :param focus_id:
        :return:						        :return:
        """							        """
        source_frame = source.upper()				        source_frame = source.upper()
        target_frame = target.upper()				        target_frame = target.upper()

        input_words = input_sentence.split()			        input_words = input_sentence.split()
        focus_word = input_words[int(focus_id)]			        focus_word = input_words[int(focus_id)]
        input_words[int(focus_id)] = "***mask***"		        input_words[int(focus_id)] = "***mask***"

        mapping = source_frame + " " + target_frame		        mapping = source_frame + " " + target_frame
        if mapping not in self.mapping or not self.mapping[ma	        if mapping not in self.mapping or not self.mapping[ma
            filled_string = "None"				            filled_string = "None"
        else:							        else:
            mapping = self.mapping[mapping]    			            mapping = self.mapping[mapping]    
            if focus_word not in self.embeddings.wv:	      |	            if focus_word not in self.embeddings:
                filled_string = None				                filled_string = None
            else:						            else:
                mapped = [v[0] for v in self.embeddings.wv.mo |	                mapped = [v[0] for v in self.embeddings.most_
                mapped = [w for w in mapped if not w.isupper(	                mapped = [w for w in mapped if not w.isupper(
                text = " ".join(input_words)			                text = " ".join(input_words)

                if not len(mapped):				                if not len(mapped):
                    filled_string = None			                    filled_string = None
                else:						                else:
                    filled_string = self.fb.fitb(text, mapped	                    filled_string = self.fb.fitb(text, mapped
        if filled_string == "None":				        if filled_string == "None":
            return None						            return None
        else:							        else:
            return filled_string				            return filled_string
							      >
